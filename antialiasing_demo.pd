#N canvas 145 169 1008 709 10;
#X obj 494 120 s start;
#N canvas 886 473 450 300 \$0-output 0;
#X obj 122 115 cc.output~;
#X text 129 99 Volume Control;
#X obj 121 55 inlet~;
#X connect 2 0 0 0;
#X connect 2 0 0 1;
#X restore 148 373 pd \$0-output;
#X obj 148 216 cc.dphasor~;
#N canvas 428 227 936 599 vv 0;
#X obj 156 161 inlet~;
#X obj 156 250 *~ 0;
#X obj 156 269 phasor~;
#X obj 156 288 *~ 4;
#X obj 156 307 -~ 2;
#X obj 156 326 abs~;
#X obj 156 345 -~ 1;
#X obj 156 364 outlet~;
#X obj 177 208 samplerate~;
#X obj 177 229 / 2;
#X obj 177 187 r \$0-init;
#X text 279 157 based on one of acriel's random modulation algorithms
;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 1 1;
#X connect 10 0 8 0;
#X restore 178 195 pd vv;
#X obj 178 174 noise~;
#X obj 148 237 cc.tsSaw~;
#X obj 278 174 phasor~;
#X obj 278 195 *~ 2;
#X obj 278 216 -~ 1;
#X obj 299 240 tgl 15 0 empty empty antialiasing_on 17 7 0 10 -257985
-1 -1 0 1;
#X obj 299 260 == 0;
#X obj 148 441 vline~;
#X obj 148 462 *~;
#X obj 148 399 r start;
#X obj 494 98 bng 15 250 50 0 empty empty empty 17 7 0 10 -257985 -1
-1;
#X obj 148 503 *~ 12000;
#X obj 278 281 *~ 1;
#X obj 148 281 *~ 0;
#X text 276 118 Basic sawtooth, f 11;
#X obj 339 343 cc.scope~;
#X obj 148 326 hip~ 20;
#X obj 148 347 *~ 0.5;
#X obj 148 483 *~;
#X text 175 464 x ^ 4 (0 < x < 1);
#X obj 148 564 s~ freq;
#X obj 148 153 r~ freq;
#X obj 278 153 r~ freq;
#X text 147 118 Antialiased sawtooth, f 13;
#X text 333 453 Press the button in the corner for a waveform popup
window, f 24;
#X text 492 169 This is a demonstration of how sound source oscillators
are implemented throughout the library., f 63;
#X text 492 447 These algorithms were originally found here: https://forum.pdpatchrepo.info/topic/6759/new-anti-aliasing-and-phase-distortion-abstractions
http://msp.ucsd.edu/techniques/v0.11/book-html/node196.html, f 63
;
#X obj 232 520 snapshot~;
#X obj 232 499 bang~;
#X obj 339 536 nbx 5 15 -1e+037 1e+037 0 0 empty empty current_frequency
0 -8 0 10 -257985 -1 -1 0 256;
#X text 492 203 The top right portion of the patch contains a basic
sawtooth oscillator constructed through relative simple means. This
basic algorithm introduces aliasing however and is not ideal for use
in instruments requiring clean higher harmonics. Without going too
much into the math \, most arbitrary waveshapes need some sort of anti-aliasing
implemented to avoid inharmonic sounds in the higher frequencies. This
is usually done by creating the oscillator in a computationally accelerated
sampling state (upsampling) and filtering out frequencies above human
hearing. This sort of algorithm is relatively CPU expensive and not
always necessary however., f 63;
#X text 492 336 The top left portion of the patch implements two relatively
low-cost anti-aliasing algorithms. The first algorithm takes in a frequency
and calculates two 'cleaner' frequencies based on the computer's sampling
rate. It then dithers between those frequencies in order to creating
an average frequency which approximates the given one. The second algorithm
splices in half a sine wave in whenever there is a discontinuity in
the sawtooth wave. The result is a cleaner sawtooth sound., f 63;
#X text 492 149 Anti aliasing demonstration;
#X msg 148 420 0 \, 1 5000 \, 0 5000 5000;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 4 0 3 0;
#X connect 5 0 17 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 16 0;
#X connect 9 0 10 0;
#X connect 9 0 17 1;
#X connect 10 0 16 1;
#X connect 11 0 12 0;
#X connect 11 0 12 1;
#X connect 12 0 22 0;
#X connect 12 0 22 1;
#X connect 13 0 37 0;
#X connect 14 0 0 0;
#X connect 15 0 24 0;
#X connect 15 0 31 0;
#X connect 16 0 20 0;
#X connect 17 0 20 0;
#X connect 20 0 19 0;
#X connect 20 0 21 0;
#X connect 21 0 1 0;
#X connect 22 0 15 0;
#X connect 25 0 2 0;
#X connect 25 0 5 1;
#X connect 26 0 6 0;
#X connect 31 0 33 0;
#X connect 32 0 31 0;
#X connect 37 0 11 0;
#X coords 0 709 1 708 85 60 0;
