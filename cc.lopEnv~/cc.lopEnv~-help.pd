#N struct 1099-key float status float root float id float x float y
;
#N canvas 248 165 1008 709 10;
#X obj 148 288 nbx 4 15 -1e+037 1e+037 0 0 empty empty note 48 8 0
10 -257985 -1 -1 55 256;
#X obj 148 324 cc.lopEnv~;
#X obj 373 288 bng 15 250 50 0 empty empty empty 17 7 0 10 -257985
-1 -1;
#N canvas 886 473 450 300 \$0-output 0;
#X obj 122 115 cc.output~;
#X text 129 99 Volume Control;
#X obj 121 55 inlet~;
#X connect 2 0 0 0;
#X connect 2 0 0 1;
#X restore 148 487 pd \$0-output;
#X obj 148 460 *~;
#X text 179 460 Envelope controls oscillator amplitude;
#N canvas 455 295 450 300 randomize 0;
#X obj 103 118 random 20;
#X msg 33 159 attack \$1;
#X msg 103 159 hold \$1;
#X msg 173 159 decay \$1;
#X msg 243 159 release \$1;
#X obj 323 139 / 1e+006;
#X msg 323 160 sustain \$1;
#X obj 33 70 inlet;
#X obj 33 210 outlet;
#X obj 173 118 random 200;
#X obj 243 118 random 400;
#X obj 33 118 random 100;
#X obj 323 118 random 1e+006;
#X connect 0 0 2 0;
#X connect 1 0 8 0;
#X connect 2 0 8 0;
#X connect 3 0 8 0;
#X connect 4 0 8 0;
#X connect 5 0 6 0;
#X connect 6 0 8 0;
#X connect 7 0 0 0;
#X connect 7 0 9 0;
#X connect 7 0 10 0;
#X connect 7 0 11 0;
#X connect 7 0 12 0;
#X connect 9 0 3 0;
#X connect 10 0 4 0;
#X connect 11 0 1 0;
#X connect 12 0 5 0;
#X restore 373 308 pd randomize;
#N canvas 756 413 450 300 oscillator 0;
#X obj 37 221 outlet~;
#N canvas 428 227 936 599 vv 0;
#X obj 156 161 inlet~;
#X obj 156 250 *~ 0;
#X obj 156 269 phasor~;
#X obj 156 288 *~ 4;
#X obj 156 307 -~ 2;
#X obj 156 326 abs~;
#X obj 156 345 -~ 1;
#X obj 156 364 outlet~;
#X obj 177 208 samplerate~;
#X obj 177 229 / 2;
#X text 279 157 based on one of acriel's random modulation algorithms
;
#X obj 177 187 loadbang;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 1 1;
#X connect 11 0 8 0;
#X restore 86 121 pd vv;
#X obj 85 96 noise~;
#X obj 37 37 inlet~;
#X obj 37 173 cc.waves~/tsSaw 0.5;
#X obj 37 149 cc.waves~/dphasor;
#X connect 1 0 5 1;
#X connect 2 0 1 0;
#X connect 3 0 4 1;
#X connect 3 0 5 0;
#X connect 4 0 0 0;
#X connect 5 0 4 0;
#X restore 148 434 pd oscillator;
#N canvas 825 164 843 680 notes 0;
#X obj 113 131 metro 400;
#X obj 113 110 r start;
#X msg 379 131 intervals 3 2 2 3 2;
#X obj 113 346 outlet;
#X obj 146 257 array size test_scale;
#X obj 113 283 random;
#X obj 113 304 array get test_scale 0 1;
#X obj 164 110 inlet;
#X obj 379 109 loadbang;
#X obj 113 152 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 268 304 Get random note from test_scale;
#X obj 113 220 t b b;
#X obj 113 326 + 48;
#X text 148 324 Increase by two octaves;
#X obj 379 152 cc.12tet test_scale;
#X connect 0 0 9 0;
#X connect 1 0 0 0;
#X connect 2 0 14 0;
#X connect 4 0 5 1;
#X connect 5 0 6 0;
#X connect 6 0 12 0;
#X connect 7 0 0 1;
#X connect 8 0 2 0;
#X connect 9 0 11 0;
#X connect 11 0 5 0;
#X connect 11 1 4 0;
#X connect 12 0 3 0;
#X restore 148 182 pd notes;
#X f 16;
#X obj 351 180 / 2;
#X msg 351 201 length \$1;
#X text 253 182 8th note length;
#X obj 568 98 nbx 4 15 -1e+037 1e+037 0 0 empty tempo.in empty 0 -8
0 10 -257985 -1 -1 150 256;
#X obj 568 118 s tempo;
#X obj 512 118 s start;
#X obj 512 98 tgl 15 0 empty empty empty 20 7 0 10 -257985 -1 -1 0
1;
#X obj 148 103 r tempo;
#X obj 365 374 loadbang;
#X msg 365 395 \; tempo.in 150;
#X text 510 326 This abstraction makes use of a low pass filter rather
than a traditional slew signal (i.e. 'vline~'). As such \, the envelope
moves at a somewhat exponential curve rather than the traditional linear
slope of a slew., f 66;
#X obj 148 203 t f b;
#X obj 373 267 sel 1;
#X obj 373 246 random 4;
#X text 253 248 25% chance to change envelope each note, f 18;
#X text 510 147 [cc.lopEnv~] - lowpass based trigger/envelope generator
, f 66;
#X text 510 248 Attack determines how fast the envelope will reach
its maximum value. Hold determines how long the naximum will be held
for. Decay determines how long it takes for the envelope to reach its
sustain value. Sustain is the value the envelope will rest at until
the end of the note. Release determines how long it takes for the envelope
to reach zero after the end of the note., f 66;
#X text 510 170 This abstraction generates takes in a MIDI note value
and outputs the note as a frequency at signal rate an ADSR envelope
with an additional hold value. This envelope is usually used to control
the volume contour of a sound (though it can be used to control more
than that). The length of the note \, the velocity \, and the pitch
glide is also controlled within the object., f 66;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 1 1 4 1;
#X connect 2 0 6 0;
#X connect 4 0 3 0;
#X connect 6 0 1 1;
#X connect 7 0 4 0;
#X connect 8 0 20 0;
#X connect 9 0 10 0;
#X connect 10 0 1 1;
#X connect 12 0 13 0;
#X connect 15 0 14 0;
#X connect 16 0 8 0;
#X connect 16 0 9 0;
#X connect 17 0 18 0;
#X connect 20 0 0 0;
#X connect 20 1 22 0;
#X connect 21 0 2 0;
#X connect 22 0 21 0;
#X coords 0 709 1 708 85 60 0;
