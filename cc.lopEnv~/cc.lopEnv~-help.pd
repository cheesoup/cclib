#N struct 1061-key float status float x float y;
#N struct 1062-cell float status float x float y;
#N struct 1062-arm float px float py;
#N canvas 248 165 1008 709 10;
#X obj 494 120 s start;
#X obj 494 100 tgl 15 0 empty empty empty 20 7 0 10 -257985 -1 -1 1
1;
#N canvas 886 473 450 300 \$0-output 0;
#X obj 122 115 cc.output~;
#X text 129 99 Volume Control;
#X obj 121 55 inlet~;
#X connect 2 0 0 0;
#X connect 2 0 0 1;
#X restore 148 436 pd \$0-output;
#X obj 148 212 nbx 4 15 -1e+037 1e+037 0 0 empty empty pitch 48 8 0
10 -257985 -1 -1 174.614 256;
#N canvas 756 413 450 300 \$0-oscillator 0;
#X obj 37 37 inlet;
#X obj 37 149 cc.dphasor~;
#X obj 37 221 outlet~;
#N canvas 428 227 936 599 vv 0;
#X obj 156 161 inlet~;
#X obj 156 250 *~ 0;
#X obj 156 269 phasor~;
#X obj 156 288 *~ 4;
#X obj 156 307 -~ 2;
#X obj 156 326 abs~;
#X obj 156 345 -~ 1;
#X obj 156 364 outlet~;
#X obj 177 208 samplerate~;
#X obj 177 229 / 2;
#X text 279 157 based on one of acriel's random modulation algorithms
;
#X obj 177 187 loadbang;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 1 1;
#X connect 11 0 8 0;
#X restore 67 121 pd vv;
#X obj 66 96 noise~;
#X obj 37 173 cc.tsSaw~ 0.5;
#X obj 37 58 sig~;
#X obj 184 164 cc.scope~;
#X connect 0 0 6 0;
#X connect 1 0 5 0;
#X connect 3 0 1 1;
#X connect 4 0 3 0;
#X connect 5 0 2 0;
#X connect 6 0 1 0;
#X connect 6 0 5 1;
#X connect 6 0 7 0;
#X restore 148 395 pd \$0-oscillator;
#X obj 148 416 *~;
#X obj 269 315 cc.lopEnv~;
#N canvas 825 164 843 680 \$0-notes 0;
#X obj 113 131 metro 400;
#X obj 113 110 r start;
#X msg 351 196 intervals 3 2 2 3 2;
#X obj 351 217 cc.scale test_scale;
#X obj 113 536 outlet;
#X obj 113 175 cc.euclid;
#X obj 146 427 array size test_scale;
#X obj 113 453 random;
#X obj 113 474 array get test_scale 0 1;
#X obj 113 495 mtof;
#X obj 113 390 t b b f;
#X obj 212 406 outlet;
#X obj 164 110 inlet;
#X obj 351 174 loadbang;
#X obj 113 516 * 16;
#X obj 113 152 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 83 56 loadbang;
#X text 148 494 Get random note from test_scale;
#X msg 83 78 pulses value 0.5 \, accents value 1 \, length 12 \, pulses
7 \, accents 3;
#X connect 0 0 15 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 5 0 10 0;
#X connect 6 0 7 1;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 9 0 14 0;
#X connect 10 0 7 0;
#X connect 10 1 6 0;
#X connect 10 2 11 0;
#X connect 12 0 0 1;
#X connect 13 0 2 0;
#X connect 14 0 4 0;
#X connect 15 0 5 0;
#X connect 16 0 18 0;
#X connect 18 0 5 0;
#X restore 148 182 pd \$0-notes;
#X f 16;
#X obj 241 212 nbx 4 15 -1e+037 1e+037 0 0 empty empty velocity 48
8 0 10 -257985 -1 -1 1 256;
#X obj 148 299 makenote 1 200;
#N canvas 455 295 450 300 \$0-randomize 0;
#X obj 103 118 random 20;
#X msg 33 159 attack \$1;
#X msg 103 159 hold \$1;
#X msg 173 159 decay \$1;
#X msg 243 159 release \$1;
#X obj 323 139 / 1e+006;
#X msg 323 160 sustain \$1;
#X obj 33 70 inlet;
#X obj 33 210 outlet;
#X obj 173 118 random 200;
#X obj 243 118 random 400;
#X obj 33 118 random 100;
#X obj 323 118 random 1e+006;
#X connect 0 0 2 0;
#X connect 1 0 8 0;
#X connect 2 0 8 0;
#X connect 3 0 8 0;
#X connect 4 0 8 0;
#X connect 5 0 6 0;
#X connect 6 0 8 0;
#X connect 7 0 0 0;
#X connect 7 0 9 0;
#X connect 7 0 10 0;
#X connect 7 0 11 0;
#X connect 7 0 12 0;
#X connect 9 0 3 0;
#X connect 10 0 4 0;
#X connect 11 0 1 0;
#X connect 12 0 5 0;
#X restore 269 290 pd \$0-randomize;
#X obj 269 261 bng 15 250 50 0 empty empty click_me! 17 7 0 10 -257985
-1 -1;
#X obj 229 137 nbx 4 15 -1e+037 1e+037 0 0 empty empty tempo 0 -8 0
10 -257985 -1 -1 200 256;
#X obj 148 100 loadbang;
#X msg 148 121 200;
#X text 492 149 cc.lopEnv~ - lowpass based envelope generator;
#X text 492 229 This abstraction makes use of a low pass filter rather
than a traditional slew signal (i.e. 'vline~'). As such \, the envelope
moves at a somewhat exponential curve rather than the traditional linear
slope of a slew.;
#X text 492 169 This abstraction generates an ADSR envelope at audio
rate. The hold value determines how long the envelope will hold the
maximum value prior to the decay stage. Attack \, hold \, decay \,
and release are defined in milliseconds.;
#X text 492 289 In this example \, we are triggering 'cc.lopEnv~' and
using the resulting ramp as a volume contour on note triggers. By modifying
the parameters \, we are able to change the way the volume is modulated
within the note being played.;
#X connect 1 0 0 0;
#X connect 3 0 9 0;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X connect 6 0 5 1;
#X connect 7 0 3 0;
#X connect 7 1 8 0;
#X connect 8 0 9 1;
#X connect 9 0 4 0;
#X connect 9 1 6 0;
#X connect 10 0 6 0;
#X connect 11 0 10 0;
#X connect 12 0 7 0;
#X connect 12 0 9 2;
#X connect 13 0 14 0;
#X connect 14 0 12 0;
#X coords 0 709 1 708 85 60 0;
