#N struct 1758-key float status float root float id float x float y
;
#N canvas 271 173 1008 709 10;
#N canvas 886 473 450 300 \$0-output 0;
#X obj 122 115 cc.output~;
#X text 129 99 Volume Control;
#X obj 121 55 inlet~;
#X connect 2 0 0 0;
#X connect 2 0 0 1;
#X restore 160 494 pd \$0-output;
#X obj 160 117 r start;
#N canvas 756 413 450 300 \$0-instrument 0;
#X obj 37 37 inlet;
#X obj 37 221 *~;
#X obj 37 245 outlet~;
#N canvas 428 227 936 599 vv 0;
#X obj 156 161 inlet~;
#X obj 156 250 *~ 0;
#X obj 156 269 phasor~;
#X obj 156 288 *~ 4;
#X obj 156 307 -~ 2;
#X obj 156 326 abs~;
#X obj 156 345 -~ 1;
#X obj 156 364 outlet~;
#X obj 177 208 samplerate~;
#X obj 177 229 / 2;
#X obj 177 187 r \$0-init;
#X text 279 157 based on one of acriel's random modulation algorithms
;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 1 1;
#X connect 10 0 8 0;
#X restore 86 125 pd vv;
#X obj 85 100 noise~;
#X obj 129 204 vline~;
#X obj 37 79 t f b;
#X msg 129 122 1 5 \, 0.25 20 5 \, 0 100 25;
#X obj 37 58 mtof;
#X obj 37 177 cc.waves~/rtri 0.5;
#X obj 37 153 cc.waves~/dphasor;
#X connect 0 0 8 0;
#X connect 1 0 2 0;
#X connect 3 0 10 1;
#X connect 4 0 3 0;
#X connect 5 0 1 1;
#X connect 6 0 10 0;
#X connect 6 1 7 0;
#X connect 7 0 5 0;
#X connect 8 0 6 0;
#X connect 9 0 1 0;
#X connect 10 0 9 0;
#X restore 160 188 pd \$0-instrument;
#X obj 225 168 nbx 4 15 -1e+037 1e+037 0 0 empty empty MIDI_Value 0
-8 0 10 -257985 -1 -1 77 256;
#N canvas 621 377 450 300 notes 0;
#X obj 39 33 inlet;
#X obj 242 222 sel 0;
#X msg 242 243 random one;
#X obj 90 33 inlet;
#X obj 39 97 metro 200;
#X obj 39 223 outlet;
#X obj 194 80 loadbang;
#X msg 194 101 floor 64;
#X obj 39 117 cc.12tet/sequence test_scale;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 2 0 8 0;
#X connect 3 0 4 1;
#X connect 4 0 8 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 5 0;
#X connect 8 1 1 0;
#X restore 160 152 pd notes;
#N canvas 0 50 450 300 \$0-scale 0;
#X msg 111 87 intervals 3 2 2 3 2;
#X obj 111 65 loadbang;
#X obj 111 108 cc.12tet test_scale;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X restore 300 188 pd \$0-scale;
#X obj 160 239 cc.pshift~ 100;
#X obj 210 117 r tempo;
#X obj 568 98 nbx 4 15 -1e+037 1e+037 0 0 empty tempo.in empty 0 -8
0 10 -257985 -1 -1 0 256;
#X obj 568 118 s tempo;
#X obj 512 118 s start;
#X obj 512 98 tgl 15 0 empty empty empty 20 7 0 10 -257985 -1 -1 0
1;
#X text 510 147 [cc.pitchshift~] - Pitchshifter with feedback control
, f 66;
#X text 510 170 This is a repackage Miller Puckette's pitch shifter
from G09 with a GUI and modifactions inspired by Acriel's implementation
of the same algorithm. The initialization argument determines the maximum
delay length., f 66;
#X text 510 226 This abstraction shifts a signal's perceivable pitch.
This is accomplished by writing the incoming signal to two delay lines
which are then transposed and spliced between. The results are rather
granular and unnatural \, but they do shift the frequency spectrum
by a multiple., f 66;
#X text 510 293 Feedback was implemented as inspired by Acriel's implementation.
This allows the pitchshifter to create some fairly thick granular reverb
or multitap delay like textures., f 66;
#X connect 1 0 4 0;
#X connect 2 0 6 0;
#X connect 4 0 2 0;
#X connect 4 0 3 0;
#X connect 6 0 0 0;
#X connect 7 0 4 1;
#X connect 8 0 9 0;
#X connect 11 0 10 0;
#X coords 0 709 1 708 85 60 0;
