#N struct 1053-key float status float x float y;
#N canvas 84 132 1008 709 10;
#N canvas 756 413 450 300 \$0-instrument 0;
#X obj 37 37 inlet;
#X obj 37 149 cc.dphasor~;
#X obj 37 197 *~;
#X obj 37 221 outlet~;
#N canvas 428 227 936 599 vv 0;
#X obj 156 161 inlet~;
#X obj 156 250 *~ 0;
#X obj 156 269 phasor~;
#X obj 156 288 *~ 4;
#X obj 156 307 -~ 2;
#X obj 156 326 abs~;
#X obj 156 345 -~ 1;
#X obj 156 364 outlet~;
#X obj 177 208 samplerate~;
#X obj 177 229 / 2;
#X obj 177 187 r \$0-init;
#X text 279 157 based on one of acriel's random modulation algorithms
;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 1 1;
#X connect 10 0 8 0;
#X restore 67 121 pd vv;
#X obj 66 96 noise~;
#X obj 119 180 vline~;
#X obj 37 58 t f b;
#X msg 119 118 1 5 \, 0.25 20 5 \, 0 100 25;
#X obj 37 173 cc.rTri~ 0.5;
#X connect 0 0 7 0;
#X connect 1 0 9 0;
#X connect 2 0 3 0;
#X connect 4 0 1 1;
#X connect 5 0 4 0;
#X connect 6 0 2 1;
#X connect 7 0 1 0;
#X connect 7 1 8 0;
#X connect 8 0 6 0;
#X connect 9 0 2 0;
#X restore 152 317 pd \$0-instrument;
#X msg 152 449 intervals 3 2 2 3 2;
#X msg 282 449 intervals 2 2 1 2 2 2 1;
#X obj 152 167 metro 400;
#X obj 152 136 r start;
#X obj 494 120 s start;
#X obj 494 100 tgl 15 0 empty empty empty 20 7 0 10 -257985 -1 -1 0
1;
#N canvas 886 473 450 300 \$0-output 0;
#X obj 122 115 cc.output~;
#X text 129 99 Volume Control;
#X obj 121 55 inlet~;
#X connect 2 0 0 0;
#X connect 2 0 0 1;
#X restore 152 338 pd \$0-output;
#X obj 293 106 loadbang;
#X obj 152 487 cc.scale test_scale;
#X obj 203 137 nbx 4 15 -1e+037 1e+037 0 0 empty empty tempo 0 -8 0
10 -257985 -1 -1 200 256;
#X obj 152 296 nbx 4 15 -1e+037 1e+037 0 0 empty empty pitch 48 8 0
10 -257985 -1 -1 0 256;
#X obj 152 188 cc.scale/sequence test_scale;
#X obj 355 296 nbx 4 15 -1e+037 1e+037 0 0 empty empty current_step
48 8 0 10 -257985 -1 -1 0 256;
#X obj 355 316 sel 0;
#X obj 355 337 random 2;
#X obj 355 358 sel 0 1;
#X obj 152 426 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 282 426 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 293 160 floor 48 \, range 36;
#X text 492 149 cc.scale/sequence - sequence a scale;
#X msg 253 121 200;
#X text 492 179 'cc.scale/sequencer' is a child abstraction of cc.scale.
It requires a name of a pre-existing array as an argument. While it
doesn't require cc.scale to function properly (any array will work)
\, they are generally meant to be used together. In the case of this
example \, the name of the array containing the musical scale values
is test_scale.;
#X text 492 257 This abstraction outputs an arbitrary sequence of pitch
values based on the table displayed. This sequence can be advanced
by either numbers or bangs. The user can draw in values within the
UI. For each step \, the corresponding table values are scaled up to
a user defined amount and then quantized according to the pitches defined
in the initialization argument.;
#X connect 0 0 7 0;
#X connect 1 0 9 0;
#X connect 2 0 9 0;
#X connect 3 0 12 0;
#X connect 4 0 3 0;
#X connect 6 0 5 0;
#X connect 8 0 21 0;
#X connect 8 0 19 0;
#X connect 10 0 3 1;
#X connect 11 0 0 0;
#X connect 12 0 11 0;
#X connect 12 1 13 0;
#X connect 13 0 14 0;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 16 1 18 0;
#X connect 17 0 1 0;
#X connect 18 0 2 0;
#X connect 19 0 12 0;
#X connect 21 0 10 0;
#X coords 0 709 1 708 85 60 0;
