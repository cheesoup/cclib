#N struct 1849-key float status float root float id float x float y
;
#N canvas 482 75 1008 709 10;
#N canvas 886 473 450 300 \$0-output 0;
#X obj 122 115 cc.output~;
#X text 129 99 Volume Control;
#X obj 121 55 inlet~;
#X connect 2 0 0 0;
#X connect 2 0 0 1;
#X restore 100 557 pd \$0-output;
#X obj 512 118 s start;
#X obj 512 98 tgl 15 0 empty empty empty 20 7 0 10 -257985 -1 -1 1
1;
#X obj 100 104 r start;
#X obj 568 98 nbx 4 15 -1e+037 1e+037 0 0 empty tempo.in empty 0 -8
0 10 -257985 -1 -1 120 256;
#N canvas 0 50 450 300 scale 0;
#X msg 107 79 intervals 3 2 2 3 2;
#X obj 107 113 cc.12tet scale;
#X msg 237 79 scale 0 2 4 5 7 9 11;
#X connect 0 0 1 0;
#X connect 2 0 1 0;
#X restore 165 125 pd scale;
#X obj 359 106 loadbang;
#X obj 359 127 bng 15 250 50 0 empty empty reset 16 7 0 10 -257985
-1 -1;
#X obj 156 104 r tempo;
#X obj 568 118 s tempo;
#N canvas 568 213 450 557 sequence 0;
#X obj 37 37 inlet;
#X obj 37 423 *~;
#X obj 37 447 outlet~;
#N canvas 428 227 936 599 vv 0;
#X obj 156 161 inlet~;
#X obj 156 250 *~ 0;
#X obj 156 269 phasor~;
#X obj 156 288 *~ 4;
#X obj 156 307 -~ 2;
#X obj 156 326 abs~;
#X obj 156 345 -~ 1;
#X obj 156 364 outlet~;
#X obj 177 208 samplerate~;
#X obj 177 229 / 2;
#X obj 177 187 r \$0-init;
#X text 279 157 based on one of acriel's random modulation algorithms
;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 1 1;
#X connect 10 0 8 0;
#X restore 86 289 pd vv;
#X obj 85 264 noise~;
#X obj 119 406 vline~;
#X obj 37 264 t f b;
#X obj 37 355 cc.waves~/dphasor;
#X obj 37 379 cc.waves~/rTri 0.5;
#X obj 37 108 cc.12tet/sequence scale;
#X obj 37 243 mtof;
#X obj 79 37 r sequences;
#X obj 159 37 r init;
#X msg 119 324 1 5 \, 0.25 20 50 \, 0 50 75;
#X obj 218 259 outlet;
#X msg 159 61 floor 48 \, length 16 \, random all;
#X obj 240 216 sel 0;
#X msg 240 237 random one;
#X connect 0 0 9 0;
#X connect 1 0 2 0;
#X connect 3 0 7 1;
#X connect 4 0 3 0;
#X connect 5 0 1 1;
#X connect 6 0 7 0;
#X connect 6 1 13 0;
#X connect 7 0 8 0;
#X connect 8 0 1 0;
#X connect 9 0 10 0;
#X connect 9 1 16 0;
#X connect 10 0 6 0;
#X connect 10 0 14 0;
#X connect 11 0 9 0;
#X connect 12 0 15 0;
#X connect 13 0 5 0;
#X connect 15 0 9 0;
#X connect 16 0 17 0;
#X connect 17 0 9 0;
#X restore 100 192 pd sequence;
#X obj 100 146 bng 15 250 50 0 empty empty empty 17 7 0 10 -257985
-1 -1;
#X obj 100 125 metro 200;
#X obj 624 98 bng 15 250 50 0 empty empty empty 16 7 0 10 -257985 -1
-1;
#X obj 624 118 s randomize;
#X obj 100 341 cc.skramfilt~;
#X obj 210 341 cc.skramfilt~;
#X obj 320 341 cc.skramfilt~;
#X msg 359 147 \; tempo.in 120 \; init bang \;;
#X text 510 147 [cc.skramfilt~] - Cascaded and Driven Bandpass Filters
, f 66;
#X text 510 170 This abstraction contains three cascaded biquad band-pass
filters with tanh limited overdrives between each one. It is essentially
the remains of a filter bank I was working on. Though fairly basic
\, it works pretty decently as a super dirty resonant filter. The signal
to be filtered goes into the left inlet. The cutoff frequency goes
into right inlet., f 66;
#X text 510 248 The mult parameter multiples in the incoming cutoff
frequency. The controls the width of bands cutoff above and below and
the cutoff frequency. Drive overdrives the signal. The unlabelled radio
menu on the right toggles filter stages on and off., f 66;
#X connect 2 0 1 0;
#X connect 3 0 12 0;
#X connect 4 0 9 0;
#X connect 6 0 7 0;
#X connect 7 0 18 0;
#X connect 8 0 12 1;
#X connect 10 0 15 0;
#X connect 10 0 16 0;
#X connect 10 0 17 0;
#X connect 10 1 15 1;
#X connect 10 1 16 1;
#X connect 10 1 17 1;
#X connect 11 0 10 0;
#X connect 12 0 11 0;
#X connect 13 0 14 0;
#X connect 15 0 0 0;
#X connect 16 0 0 0;
#X connect 17 0 0 0;
#X coords 0 709 1 708 85 60 0;
